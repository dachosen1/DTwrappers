% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/convert.factor.to.character.R,
%   R/create.filter.expression.R
\name{create.filter.expression}
\alias{create.filter.expression}
\title{create.filter.expression}
\usage{
create.filter.expression(the.filter)

create.filter.expression(the.filter)
}
\description{
@description A function that filters expression. Expression could be a character, logical value, or logical operation code.

@description A function that filters expression. Expression could be a character, logical value, or logical operation code.
}
\details{
@param the.filter a character value, logical value, or expression stating the logical operations to be performed in filtering the data prior to calculating the.function.
 @export
 @import formulaic
 @import dplyr
 @examples 
 
 dat <- snack.dat
 income.group.name <- "Income Group"
 region.name <- "Region"
 
 dat[, eval(income.group.name) := as.factor(get(income.group.name))]
 dat[, eval(region.name) := as.factor(get(region.name))]
 str(dat[, lapply(X = .SD, FUN = "convert.factor.to.character"), .SDcols = c(income.group.name, region.name)])

@param the.filter a character value, logical value, or expression stating the logical operations to be performed in filtering the data prior to calculating the.function.
 @export
 @examples 
 
 @import formulaic
 @import dplyr
 
 dat <- snack.dat
 
 age.name = "Age"
 region.name = "Region"
 
 the.filter = c(age.name, region.name)
 create.filter.expression(the.filter = the.filter)
 create.filter.expression(the.filter = age.name == region.name)
}
